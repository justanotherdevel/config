(function(e, a) { for(var i in a) e[i] = a[i]; if(a.__esModule) Object.defineProperty(e, "__esModule", { value: true }); }(exports,
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ([
/* 0 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.activate = void 0;
const coc_nvim_1 = __webpack_require__(1);
let terminal = null;
let showing = false;
async function activate(context) {
    context.subscriptions.push(coc_nvim_1.commands.registerCommand('terminal.Toggle', async () => {
        await toggle();
    }), coc_nvim_1.commands.registerCommand('terminal.REPL', async () => {
        await repl();
    }), coc_nvim_1.commands.registerCommand('terminal.Destroy', () => {
        if (terminal) {
            terminal.dispose();
            terminal = null;
            showing = false;
        }
    }), coc_nvim_1.workspace.registerKeymap(['n'], 'terminal-toggle', async () => {
        await toggle();
    }, { sync: false }));
    coc_nvim_1.events.on('BufHidden', async (bufnr) => {
        if ((terminal === null || terminal === void 0 ? void 0 : terminal.bufnr) === bufnr) {
            showing = false;
        }
    });
    coc_nvim_1.events.on('BufUnload', async (bufnr) => {
        if ((terminal === null || terminal === void 0 ? void 0 : terminal.bufnr) === bufnr) {
            terminal = null;
            showing = false;
        }
    });
    coc_nvim_1.events.on('BufEnter', async (bufnr) => {
        if ((terminal === null || terminal === void 0 ? void 0 : terminal.bufnr) === bufnr) {
            terminal.sendText("", false);
            await coc_nvim_1.workspace.nvim.command('startinsert');
        }
    });
}
exports.activate = activate;
async function toggle() {
    if (!terminal) {
        const config = coc_nvim_1.workspace.getConfiguration('terminal');
        const shellPath = config.get('shellPath');
        const shellArgs = config.get('shellArgs');
        terminal = await coc_nvim_1.workspace.createTerminal({ name: 'coc-terminal', shellPath, shellArgs });
        if (!terminal) {
            coc_nvim_1.window.showMessage(`Create terminal failed`, 'error');
            return;
        }
    }
    if (showing) {
        terminal.hide();
        showing = false;
    }
    else {
        terminal.show();
        showing = true;
    }
}
async function repl() {
    const doc = await coc_nvim_1.workspace.document;
    if (!doc.filetype) {
        coc_nvim_1.window.showMessage(`Unknown buffer filetype ${doc.filetype}`, 'warning');
        return;
    }
    const config = coc_nvim_1.workspace.getConfiguration('terminal');
    const mappings = config.get('REPLMappings', {});
    const prog = mappings[doc.filetype];
    if (!prog) {
        coc_nvim_1.window.showMessage(`No REPL program found for ${doc.filetype}, you can custom it with "terminal.REPLMappings"`, 'warning');
        return;
    }
    if (terminal)
        terminal.dispose();
    const shellPath = config.get('shellPath');
    const shellArgs = config.get('shellArgs');
    terminal = await coc_nvim_1.workspace.createTerminal({ name: 'coc-terminal', shellPath, shellArgs });
    if (!terminal) {
        coc_nvim_1.window.showMessage(`Create terminal failed`, 'error');
        return;
    }
    terminal.sendText(prog, true);
    await coc_nvim_1.workspace.nvim.command('startinsert');
    showing = true;
}


/***/ }),
/* 1 */
/***/ ((module) => {

module.exports = require("coc.nvim");;

/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })()

));