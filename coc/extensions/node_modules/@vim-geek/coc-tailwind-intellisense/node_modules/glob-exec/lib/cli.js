#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const glob_exec_1 = require("./glob-exec");
function execute(cmd) {
    return new Promise((resolve, reject) => {
        const proc = child_process_1.spawn(cmd, [], { stdio: "inherit", shell: true });
        const onerror = (err) => {
            proc.removeListener("close", onclose);
            reject(err);
        };
        const onclose = (code) => {
            proc.removeListener("error", onerror);
            if (code !== 0) {
                reject(new Error("Command failed: " + cmd));
            }
            else {
                resolve();
            }
        };
        proc.once("error", onerror);
        proc.once("close", onclose);
    });
}
function executeSync(cmd) {
    child_process_1.execSync(cmd, { stdio: "inherit" });
}
function main(args) {
    const pattern = args._.shift();
    const command = args._.join(" ");
    if (args.foreach) {
        if (args.parallel) {
            return glob_exec_1.foreach(pattern, command, args.glob).then((cmds) => {
                return Promise.all(cmds.map(execute));
            });
        }
        else {
            return glob_exec_1.foreach(pattern, command, args.glob).then((cmds) => {
                cmds.forEach(executeSync);
            });
        }
    }
    else {
        return glob_exec_1.all(pattern, command, args.glob).then(executeSync);
    }
}
// tslint:disable-next-line:no-var-requires
const subarg = require("subarg"); // no type definition for `subarg` yet
const argv = subarg(process.argv.slice(2), {
    boolean: ["foreach", "parallel"],
});
main(argv).catch((reason) => {
    // make the application fail
    setImmediate(() => { throw reason; });
});
//# sourceMappingURL=cli.js.map