"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const glob = require("glob");
const path = require("path");
function globy(pattern, opts) {
    return new Promise((resolve, reject) => {
        function cb(err, matches) {
            if (!!err) {
                reject(err);
            }
            else {
                resolve(matches);
            }
        }
        if (opts === undefined) {
            glob(pattern, cb);
        }
        else {
            glob(pattern, opts, cb);
        }
    });
}
function replace(input, keys, values) {
    return input.replace(/\{\{(.*?)\}\}/g, (match, content) => {
        const body = "do { return (" + content + "); } while(false);";
        const fn = Function.apply(null, keys.concat([body]));
        try {
            const res = fn.apply(null, values);
            return res.toString();
        }
        catch (e) {
            return match;
        }
    });
}
const globals = [
    ["Buffer", "__dirname", "__filename", "clearImmediate", "clearInterval", "clearTimeout",
        "console", "exports", "global", "module", "process", "require", "setImmediate", "setInterval", "setTimeout"],
    [Buffer, __dirname, __filename, clearImmediate, clearInterval, clearTimeout,
        console, exports, global, module, process, require, setImmediate, setInterval, setTimeout],
];
function all(pattern, cmd, opts) {
    return globy(pattern, opts).then((files) => {
        return replace(cmd, globals[0].concat(["files"]), globals[1].concat([files]));
    });
}
exports.all = all;
class ParsedPath {
    constructor(p) {
        this.path = p;
        ({ root: this.root, dir: this.dir, base: this.base, ext: this.ext, name: this.name } = path.parse(p));
    }
    toString() {
        return this.path;
    }
    relative(from) {
        return path.relative(from, this.path);
    }
}
function foreach(pattern, cmd, opts) {
    return globy(pattern, opts).then((files) => {
        return files.map((file) => {
            const parsed = new ParsedPath(file);
            return replace(cmd, globals[0].concat(["file"]), globals[1].concat([parsed]));
        });
    });
}
exports.foreach = foreach;
//# sourceMappingURL=glob-exec.js.map