var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/index.ts
__markAsModule(exports);
__export(exports, {
  activate: () => activate
});
var import_coc = __toModule(require("coc.nvim"));
var typeScriptExtensionId = "coc-tsserver";
var pluginId = "typescript-styled-plugin";
var configurationSection = "styled-components";
async function activate(context) {
  const tsExtension = import_coc.extensions.all.find((e) => e.id === typeScriptExtensionId);
  if (!tsExtension) {
    return;
  }
  await tsExtension.activate();
  if (!tsExtension.exports) {
    return;
  }
  const api = tsExtension.exports;
  if (!api) {
    return;
  }
  import_coc.workspace.onDidChangeConfiguration((e) => {
    if (e.affectsConfiguration(configurationSection)) {
      synchronizeConfiguration(api);
    }
  }, null, context.subscriptions);
  synchronizeConfiguration(api);
}
function synchronizeConfiguration(api) {
  if (!api)
    return;
  api.configurePlugin(pluginId, getConfiguration());
}
function getConfiguration() {
  const config = import_coc.workspace.getConfiguration(configurationSection);
  const outConfig = {};
  withConfigValue(config, "tags", (tags) => {
    outConfig.tags = tags;
  });
  withConfigValue(config, "validate", (validate) => {
    outConfig.validate = validate;
  });
  withConfigValue(config, "lint", (lint) => {
    outConfig.lint = lint;
  });
  return outConfig;
}
function withConfigValue(config, key, withValue) {
  const configSetting = config.inspect(key);
  if (!configSetting) {
    return;
  }
  const value = config.get(key, void 0);
  if (typeof value !== "undefined") {
    withValue(value);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  activate
});
