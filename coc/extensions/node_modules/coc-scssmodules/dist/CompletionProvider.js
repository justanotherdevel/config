"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var coc_nvim_1 = require("coc.nvim");
var fs_1 = require("fs");
var lodash_camelcase_1 = __importDefault(require("lodash.camelcase"));
var vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
var utils_1 = require("./utils");
var CSSModulesCompletionProvider = /** @class */ (function () {
    function CSSModulesCompletionProvider(camelCase, logger) {
        switch (camelCase) {
            case true:
                this.transformer = lodash_camelcase_1.default;
                break;
            case "dashes":
                this.transformer = function (s) {
                    return s.replace(/-(\w)/g, function (_, firstLetter) { return firstLetter.toUpperCase(); });
                };
                break;
            default:
                this.transformer = function (s) { return s; };
        }
        this.logger = logger;
    }
    CSSModulesCompletionProvider.prototype.isCompletionTrigger = function (line, position) {
        var index = position.character - 1;
        return line[index] === "." || (index > 1 && line[index - 1] === ".");
    };
    CSSModulesCompletionProvider.prototype.getParts = function (line, position) {
        var text = line.slice(0, position.character);
        var index = text.search(/[a-z0-9\._]*$/i);
        if (index === -1) {
            return ["", ""];
        }
        var remaining = text.slice(index);
        if (!remaining || !remaining.includes(".")) {
            return ["", ""];
        }
        var _a = remaining.split("."), _b = _a[0], importName = _b === void 0 ? "" : _b, _c = _a[1], className = _c === void 0 ? "" : _c;
        return [importName, className];
    };
    CSSModulesCompletionProvider.prototype.getClassNames = function (filePath, keyword) {
        var _this = this;
        var content = fs_1.readFileSync(filePath, "utf8");
        var matches = content.match(/(\.|&)[A-z][A-z0-9-_]+/g) || [];
        var lastClass = "";
        var classes = matches.reduce(function (classNames, line) {
            var className = line
                .replace(/(,|{)\s*$/, "")
                .trim()
                .replace(/^\./, "");
            if (className.startsWith("&")) {
                className = "" + lastClass + className.substring(1);
            }
            className = _this.transformer(className);
            lastClass = className;
            if (!keyword || className.includes(keyword)) {
                return __spreadArrays(classNames, [className]);
            }
            return classNames;
        }, []);
        return utils_1.uniq(classes);
    };
    CSSModulesCompletionProvider.prototype.provideCompletionItems = function (document, position) {
        return __awaiter(this, void 0, void 0, function () {
            var nvim, line, _a, importName, className, importPath, classNames;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        nvim = coc_nvim_1.workspace.nvim;
                        return [4 /*yield*/, nvim.eval('getline(".")')];
                    case 1:
                        line = _b.sent();
                        if (typeof line !== "string" || !this.isCompletionTrigger(line, position)) {
                            return [2 /*return*/, []];
                        }
                        _a = this.getParts(line, position), importName = _a[0], className = _a[1];
                        if (!importName) {
                            return [2 /*return*/, []];
                        }
                        importPath = utils_1.getImportPath(document, importName);
                        if (!importPath || !fs_1.existsSync(importPath)) {
                            return [2 /*return*/, []];
                        }
                        classNames = this.getClassNames(importPath, className);
                        return [2 /*return*/, classNames.map(function (name) { return vscode_languageserver_protocol_1.CompletionItem.create(name); })];
                }
            });
        });
    };
    return CSSModulesCompletionProvider;
}());
exports.default = CSSModulesCompletionProvider;
//# sourceMappingURL=CompletionProvider.js.map